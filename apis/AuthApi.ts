/* tslint:disable */
/* eslint-disable */
/**
 * Chatter
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineObject,
    InlineObjectFromJSON,
    InlineObjectToJSON,
} from '../models';

export interface AuthLoginPostRequest {
    inlineObject?: InlineObject;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Login
     */
    async authLoginPostRaw(requestParameters: AuthLoginPostRequest): Promise<runtime.ApiResponse<object>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObjectToJSON(requestParameters.inlineObject),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Login
     */
    async authLoginPost(requestParameters: AuthLoginPostRequest): Promise<object> {
        const response = await this.authLoginPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Me
     */
    async authMeGetRaw(): Promise<runtime.ApiResponse<object>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Me
     */
    async authMeGet(): Promise<object> {
        const response = await this.authMeGetRaw();
        return await response.value();
    }

}
